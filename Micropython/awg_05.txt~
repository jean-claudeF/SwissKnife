# Arbitrary Waveform Generator

by jean-claude.feltes@education.lu
https://github.com/jean-claudeF/ArbitraryWaveformGenerator

DAC on Pins GP8...GP15

Inspired by Rolf Oldeman, 13/2/2021. CC BY-NC-SA 4.0 licence
This is a simplified  version with fixed number of samples
Advantage: Practically no delay when changing frequency
Disadvantage: smaller frequency range
(could be extended however by putting more than 1 period into the buffer)
Range is OK for audio purposes: 1Hz ... 32kHz

## Micropython

MODES:
modes = ["sine", "saw", "triangle", "rect", "demo", "abssine", "awg","awg_new", "awg_last"]

For the mode "awg" the Pico must have a file awgvalues.py that defines the curve in Python format
like this:

``` python
function = 'sin(2*pi*x) + cos(3*pi*x)'
N = 4096
values = [231, 231, 231, 231, 232, 232, 232, ...]
```

There is a Python software for the PC to easily generate and transfer this.

For an explanation of the fundamental algorithm see here:

https://staff.ltam.lu/feljc/electronics/uPython/PIO_DDS.pdf


### Some explanations to the code

#### Modes sine, saw, triangle, rect

The waveform is calculated and the buffer filled with the calculated values.

N is the number of samples


#### awg modes

- the modes awg, awg_new and awg_last essentially do the same, the different names are for compatibility with the PC software only


- For awg() and awg_new(), data are imported in Python format.
This is elegant, but leads to failure if the import is done more than once.
To avoid this, the module awgvalues is deleted if it was already in memory.

``` python
def awg():
    global N, buffer
    try:
        del sys.modules['awgvalues']
    except:
        print("Importing awgvalues.py")
        
    import awgvalues as a
    set_N(a.N)
    values = a.values
    print(a.function)
   
    for i in range(0, N):
        buffer[i] = values[i]
```        

#### Setting modes and frequency via terminal

When awg_05.py is started, a loop that asks for frequency or mode is started.

Thus the generator can be simply controlled via serial terminal.

``` python
def mainloop():
    sine()
    start(440)
    
    while(True):
        f = ask_f_and_mode()
        if not f:
            stop()
            break
        start(f) 
    stop()
```

The function ask_f_and_mode is used to input frequency or mode, or stop on empty input:

``` python
def ask_f_and_mode():
    modes = ["sine", "saw", "triangle", "rect", "demo", "abssine", "awg","awg_new", "awg_last"]
    f = FREQUENCY
    print("Input f/Hz or mode")
    print("Modes: ", modes)
    print("Empty to stop")
    s = input("f/Hz or mode: ")
    if not s:
        f = 0
        stop()
    elif s.isdigit():
        f = float(s)
    else:
        if s in modes:
            exec(s + "()")
    
    return f
```




